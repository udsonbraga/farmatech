# docker-compose.yml
# Localização: farmatech/docker-compose.yml

version: '3.8'

services:
  # Serviço de Banco de Dados PostgreSQL
  db:
    image: postgres:13-alpine # Imagem oficial do PostgreSQL
    restart: always # Reinicia o contêiner se ele cair
    environment:
      POSTGRES_DB: farmatech_db    # Nome do banco de dados
      POSTGRES_USER: user          # Usuário do banco de dados
      POSTGRES_PASSWORD: password  # Senha do banco de dados (MUDE PARA PRODUÇÃO!)
    volumes:
      - db_data:/var/lib/postgresql/data # Volume para persistir os dados do banco
    healthcheck: # Verifica se o banco de dados está pronto
      test: ["CMD-SHELL", "pg_isready -U user -d farmatech_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    expose: # Expõe a porta internamente para outros serviços Docker
      - "5432"

  # Serviço de Backend Django
  backend:
    build:
      context: ./farmatech_backend # Caminho para a pasta do seu backend
      dockerfile: Dockerfile       # Nome do Dockerfile dentro da pasta do backend
    command: > # Comando para iniciar o servidor Gunicorn
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn farmatech_backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./farmatech_backend/media:/app/farmatech_backend/media # Opcional: para persistir uploads de mídia
      - ./farmatech_backend/staticfiles:/app/farmatech_backend/staticfiles # Opcional: para coletar estáticos
    environment:
      # Variáveis de ambiente para o Django (IMPORTANTE: MUDAR PARA PRODUÇÃO)
      DATABASE_URL: postgres://user:password@db:5432/farmatech_db # Conecta ao serviço 'db' do Docker Compose
      SECRET_KEY: "SUA_SECRET_KEY_GERADA_AQUI" # Use a chave que você gerou!
      DEBUG: "False" # MUDE PARA FALSE EM PRODUÇÃO!
      ALLOWED_HOSTS: "*" # Mude para o IP público ou domínio da sua instância EC2 em produção! Ex: "seu.dominio.com,seu_ip_publico"
      GEMINI_API_KEY: "SUA_CHAVE_API_GEMINI_AQUI" # Insira sua chave Gemini API real
    expose: # Expõe a porta 8000 internamente para o Nginx do frontend
      - "8000"
    depends_on:
      db:
        condition: service_healthy # Garante que o DB esteja pronto antes de iniciar o backend

  # Serviço de Frontend React (Nginx)
  frontend:
    build:
      context: ./ # <<<<<< CONTEXTO ALTERADO: Aponta para a raiz do projeto (onde está o frontend)
      dockerfile: Dockerfile # <<<<<< Dockerfile na raiz do projeto
    ports:
      - "80:80" # Mapeia a porta 80 do contêiner para a porta 80 da instância EC2
    depends_on:
      - backend # Garante que o backend esteja rodando antes de iniciar o frontend

# Volumes para persistência de dados
volumes:
  db_data:
